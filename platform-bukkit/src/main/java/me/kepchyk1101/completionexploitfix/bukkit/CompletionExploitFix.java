package me.kepchyk1101.completionexploitfix.bukkit;

import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.ProtocolManager;
import lombok.AccessLevel;
import lombok.experimental.FieldDefaults;
import me.kepchyk1101.completionexploitfix.bukkit.listener.TabCompleteListener;
import me.kepchyk1101.completionexploitfix.commons.ProjectConstants;
import org.bstats.bukkit.Metrics;
import org.bukkit.plugin.java.JavaPlugin;
import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
import org.jetbrains.annotations.NotNull;

@FieldDefaults(level = AccessLevel.PRIVATE)
public class CompletionExploitFix extends JavaPlugin {

    @MonotonicNonNull
    ProtocolManager protocolManager;

    @Override
    public void onEnable() {

        if (isPluginDisable("ProtocolLib")) {
            getLogger().warning("ProtocolLib is required to enable CompletionExploitFix! Disabling ...");
            getServer().getPluginManager().disablePlugin(this);
            return;
        }

        protocolManager = ProtocolLibrary.getProtocolManager();

        protocolManager.addPacketListener(new TabCompleteListener(this));

        new Metrics(this, ProjectConstants.SPIGOTMC_PLUGIN_ID);

        getLogger().info("Plugin enabled!");

    }

    @Override
    public void onDisable() {
        getLogger().info("Plugin disabled!");
    }

    private boolean isPluginEnable(@NotNull String pluginName) {
        return getServer().getPluginManager().isPluginEnabled(pluginName);
    }

    private boolean isPluginDisable(@NotNull String pluginName) {
        return !isPluginEnable(pluginName);
    }

}
